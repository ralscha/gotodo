// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AppUser is an object representing the database table.
type AppUser struct {
	ID           int64            `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email        string           `boil:"email" json:"email" toml:"email" yaml:"email"`
	EmailNew     null.String      `boil:"email_new" json:"email_new,omitempty" toml:"email_new" yaml:"email_new,omitempty"`
	PasswordHash string           `boil:"password_hash" json:"password_hash" toml:"password_hash" yaml:"password_hash"`
	Authority    AppUserAuthority `boil:"authority" json:"authority" toml:"authority" yaml:"authority"`
	Activated    bool             `boil:"activated" json:"activated" toml:"activated" yaml:"activated"`
	Expired      null.Time        `boil:"expired" json:"expired,omitempty" toml:"expired" yaml:"expired,omitempty"`
	LastAccess   null.Time        `boil:"last_access" json:"last_access,omitempty" toml:"last_access" yaml:"last_access,omitempty"`

	R *appUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L appUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AppUserColumns = struct {
	ID           string
	Email        string
	EmailNew     string
	PasswordHash string
	Authority    string
	Activated    string
	Expired      string
	LastAccess   string
}{
	ID:           "id",
	Email:        "email",
	EmailNew:     "email_new",
	PasswordHash: "password_hash",
	Authority:    "authority",
	Activated:    "activated",
	Expired:      "expired",
	LastAccess:   "last_access",
}

var AppUserTableColumns = struct {
	ID           string
	Email        string
	EmailNew     string
	PasswordHash string
	Authority    string
	Activated    string
	Expired      string
	LastAccess   string
}{
	ID:           "app_user.id",
	Email:        "app_user.email",
	EmailNew:     "app_user.email_new",
	PasswordHash: "app_user.password_hash",
	Authority:    "app_user.authority",
	Activated:    "app_user.activated",
	Expired:      "app_user.expired",
	LastAccess:   "app_user.last_access",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperAppUserAuthority struct{ field string }

func (w whereHelperAppUserAuthority) EQ(x AppUserAuthority) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperAppUserAuthority) NEQ(x AppUserAuthority) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperAppUserAuthority) LT(x AppUserAuthority) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperAppUserAuthority) LTE(x AppUserAuthority) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperAppUserAuthority) GT(x AppUserAuthority) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperAppUserAuthority) GTE(x AppUserAuthority) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperAppUserAuthority) IN(slice []AppUserAuthority) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperAppUserAuthority) NIN(slice []AppUserAuthority) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AppUserWhere = struct {
	ID           whereHelperint64
	Email        whereHelperstring
	EmailNew     whereHelpernull_String
	PasswordHash whereHelperstring
	Authority    whereHelperAppUserAuthority
	Activated    whereHelperbool
	Expired      whereHelpernull_Time
	LastAccess   whereHelpernull_Time
}{
	ID:           whereHelperint64{field: "`app_user`.`id`"},
	Email:        whereHelperstring{field: "`app_user`.`email`"},
	EmailNew:     whereHelpernull_String{field: "`app_user`.`email_new`"},
	PasswordHash: whereHelperstring{field: "`app_user`.`password_hash`"},
	Authority:    whereHelperAppUserAuthority{field: "`app_user`.`authority`"},
	Activated:    whereHelperbool{field: "`app_user`.`activated`"},
	Expired:      whereHelpernull_Time{field: "`app_user`.`expired`"},
	LastAccess:   whereHelpernull_Time{field: "`app_user`.`last_access`"},
}

// AppUserRels is where relationship names are stored.
var AppUserRels = struct {
	Todos  string
	Tokens string
}{
	Todos:  "Todos",
	Tokens: "Tokens",
}

// appUserR is where relationships are stored.
type appUserR struct {
	Todos  TodoSlice  `boil:"Todos" json:"Todos" toml:"Todos" yaml:"Todos"`
	Tokens TokenSlice `boil:"Tokens" json:"Tokens" toml:"Tokens" yaml:"Tokens"`
}

// NewStruct creates a new relationship struct
func (*appUserR) NewStruct() *appUserR {
	return &appUserR{}
}

func (r *appUserR) GetTodos() TodoSlice {
	if r == nil {
		return nil
	}
	return r.Todos
}

func (r *appUserR) GetTokens() TokenSlice {
	if r == nil {
		return nil
	}
	return r.Tokens
}

// appUserL is where Load methods for each relationship are stored.
type appUserL struct{}

var (
	appUserAllColumns            = []string{"id", "email", "email_new", "password_hash", "authority", "activated", "expired", "last_access"}
	appUserColumnsWithoutDefault = []string{"email", "email_new", "password_hash", "authority", "activated", "expired", "last_access"}
	appUserColumnsWithDefault    = []string{"id"}
	appUserPrimaryKeyColumns     = []string{"id"}
	appUserGeneratedColumns      = []string{}
)

type (
	// AppUserSlice is an alias for a slice of pointers to AppUser.
	// This should almost always be used instead of []AppUser.
	AppUserSlice []*AppUser

	appUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	appUserType                 = reflect.TypeOf(&AppUser{})
	appUserMapping              = queries.MakeStructMapping(appUserType)
	appUserPrimaryKeyMapping, _ = queries.BindMapping(appUserType, appUserMapping, appUserPrimaryKeyColumns)
	appUserInsertCacheMut       sync.RWMutex
	appUserInsertCache          = make(map[string]insertCache)
	appUserUpdateCacheMut       sync.RWMutex
	appUserUpdateCache          = make(map[string]updateCache)
	appUserUpsertCacheMut       sync.RWMutex
	appUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single appUser record from the query.
func (q appUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AppUser, error) {
	o := &AppUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for app_user")
	}

	return o, nil
}

// All returns all AppUser records from the query.
func (q appUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppUserSlice, error) {
	var o []*AppUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AppUser slice")
	}

	return o, nil
}

// Count returns the count of all AppUser records in the query.
func (q appUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count app_user rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q appUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if app_user exists")
	}

	return count > 0, nil
}

// Todos retrieves all the todo's Todos with an executor.
func (o *AppUser) Todos(mods ...qm.QueryMod) todoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`todo`.`app_user_id`=?", o.ID),
	)

	return Todos(queryMods...)
}

// Tokens retrieves all the token's Tokens with an executor.
func (o *AppUser) Tokens(mods ...qm.QueryMod) tokenQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`tokens`.`app_user_id`=?", o.ID),
	)

	return Tokens(queryMods...)
}

// LoadTodos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (appUserL) LoadTodos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppUser interface{}, mods queries.Applicator) error {
	var slice []*AppUser
	var object *AppUser

	if singular {
		var ok bool
		object, ok = maybeAppUser.(*AppUser)
		if !ok {
			object = new(AppUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAppUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAppUser))
			}
		}
	} else {
		s, ok := maybeAppUser.(*[]*AppUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAppUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAppUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &appUserR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appUserR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`todo`),
		qm.WhereIn(`todo.app_user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load todo")
	}

	var resultSlice []*Todo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice todo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on todo")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for todo")
	}

	if singular {
		object.R.Todos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &todoR{}
			}
			foreign.R.AppUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AppUserID {
				local.R.Todos = append(local.R.Todos, foreign)
				if foreign.R == nil {
					foreign.R = &todoR{}
				}
				foreign.R.AppUser = local
				break
			}
		}
	}

	return nil
}

// LoadTokens allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (appUserL) LoadTokens(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppUser interface{}, mods queries.Applicator) error {
	var slice []*AppUser
	var object *AppUser

	if singular {
		var ok bool
		object, ok = maybeAppUser.(*AppUser)
		if !ok {
			object = new(AppUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAppUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAppUser))
			}
		}
	} else {
		s, ok := maybeAppUser.(*[]*AppUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAppUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAppUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &appUserR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appUserR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tokens`),
		qm.WhereIn(`tokens.app_user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tokens")
	}

	var resultSlice []*Token
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tokens")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tokens")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tokens")
	}

	if singular {
		object.R.Tokens = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tokenR{}
			}
			foreign.R.AppUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AppUserID {
				local.R.Tokens = append(local.R.Tokens, foreign)
				if foreign.R == nil {
					foreign.R = &tokenR{}
				}
				foreign.R.AppUser = local
				break
			}
		}
	}

	return nil
}

// AddTodos adds the given related objects to the existing relationships
// of the app_user, optionally inserting them as new records.
// Appends related to o.R.Todos.
// Sets related.R.AppUser appropriately.
func (o *AppUser) AddTodos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Todo) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AppUserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `todo` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"app_user_id"}),
				strmangle.WhereClause("`", "`", 0, todoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AppUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &appUserR{
			Todos: related,
		}
	} else {
		o.R.Todos = append(o.R.Todos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &todoR{
				AppUser: o,
			}
		} else {
			rel.R.AppUser = o
		}
	}
	return nil
}

// AddTokens adds the given related objects to the existing relationships
// of the app_user, optionally inserting them as new records.
// Appends related to o.R.Tokens.
// Sets related.R.AppUser appropriately.
func (o *AppUser) AddTokens(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Token) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AppUserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `tokens` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"app_user_id"}),
				strmangle.WhereClause("`", "`", 0, tokenPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AppUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &appUserR{
			Tokens: related,
		}
	} else {
		o.R.Tokens = append(o.R.Tokens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tokenR{
				AppUser: o,
			}
		} else {
			rel.R.AppUser = o
		}
	}
	return nil
}

// AppUsers retrieves all the records using an executor.
func AppUsers(mods ...qm.QueryMod) appUserQuery {
	mods = append(mods, qm.From("`app_user`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`app_user`.*"})
	}

	return appUserQuery{q}
}

// FindAppUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAppUser(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*AppUser, error) {
	appUserObj := &AppUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `app_user` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, appUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from app_user")
	}

	return appUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AppUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no app_user provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(appUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	appUserInsertCacheMut.RLock()
	cache, cached := appUserInsertCache[key]
	appUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			appUserAllColumns,
			appUserColumnsWithDefault,
			appUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(appUserType, appUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(appUserType, appUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `app_user` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `app_user` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `app_user` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, appUserPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into app_user")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == appUserMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for app_user")
	}

CacheNoHooks:
	if !cached {
		appUserInsertCacheMut.Lock()
		appUserInsertCache[key] = cache
		appUserInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AppUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AppUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	appUserUpdateCacheMut.RLock()
	cache, cached := appUserUpdateCache[key]
	appUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			appUserAllColumns,
			appUserPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("models: unable to update app_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `app_user` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, appUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(appUserType, appUserMapping, append(wl, appUserPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update app_user row")
	}

	if !cached {
		appUserUpdateCacheMut.Lock()
		appUserUpdateCache[key] = cache
		appUserUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q appUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for app_user")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AppUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `app_user` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, appUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in appUser slice")
	}

	return nil
}

var mySQLAppUserUniqueColumns = []string{
	"id",
	"email",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AppUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no app_user provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(appUserColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAppUserUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	appUserUpsertCacheMut.RLock()
	cache, cached := appUserUpsertCache[key]
	appUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			appUserAllColumns,
			appUserColumnsWithDefault,
			appUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			appUserAllColumns,
			appUserPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert app_user, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`app_user`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `app_user` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(appUserType, appUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(appUserType, appUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for app_user")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == appUserMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(appUserType, appUserMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for app_user")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for app_user")
	}

CacheNoHooks:
	if !cached {
		appUserUpsertCacheMut.Lock()
		appUserUpsertCache[key] = cache
		appUserUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AppUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AppUser) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no AppUser provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), appUserPrimaryKeyMapping)
	sql := "DELETE FROM `app_user` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from app_user")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q appUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no appUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from app_user")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AppUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `app_user` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, appUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from appUser slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AppUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAppUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AppUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AppUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `app_user`.* FROM `app_user` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, appUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AppUserSlice")
	}

	*o = slice

	return nil
}

// AppUserExists checks if the AppUser row exists.
func AppUserExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `app_user` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if app_user exists")
	}

	return exists, nil
}

// Exists checks if the AppUser row exists.
func (o *AppUser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AppUserExists(ctx, exec, o.ID)
}
